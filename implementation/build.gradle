plugins {
    id 'java'
    id 'jacoco'
}

group 'org.column4j'
version '0.0.1'


targetCompatibility = JavaVersion.VERSION_21
sourceCompatibility = JavaVersion.VERSION_21

def previewJvmArgs = Arrays.asList(preiview_jvm_args.split(' '))

repositories {
    mavenCentral()
}

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

tasks.register('jmh', JavaExec) {
    dependsOn jmhClasses
    mainClass = 'org.openjdk.jmh.Main'
    jvmArgs = previewJvmArgs
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

dependencies {
    compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    implementation group: 'org.eclipse.collections', name: 'eclipse-collections', version: '8.2.1'
    implementation group: 'org.roaringbitmap', name: 'RoaringBitmap', version: '1.0.0'
    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.12'

    implementation group: 'com.google.guava', name: 'guava', version: lib_guava_version

    jmhImplementation group: 'org.openjdk.jmh', name: 'jmh-core', version: lib_jmh_version
    jmhAnnotationProcessor group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: lib_jmh_version

    testImplementation group: 'org.mockito', name: 'mockito-core', version: lib_mockito_version

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: lib_junit_version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: lib_junit_version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: lib_junit_version
}

test {
    jvmArgs = previewJvmArgs
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

tasks.compileJava {
    options.compilerArgs.addAll(previewJvmArgs)
}

tasks.compileTestJava {
    options.compilerArgs.addAll(previewJvmArgs)
}

tasks.compileJmhJava {
    options.compilerArgs.addAll(previewJvmArgs)
}

// to make sure benchmarks always get compiled
classes.finalizedBy(jmhClasses)