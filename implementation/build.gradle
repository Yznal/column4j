plugins {
    id 'java'
    id 'jacoco'
}

group 'org.column4j'
version '0.0.1'


targetCompatibility = JavaVersion.VERSION_21
sourceCompatibility = JavaVersion.VERSION_21

def previewJvmArgs = Arrays.asList(preiview_jvm_args.split(' '))

repositories {
    mavenCentral()
}

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'org.openjdk.jmh.Main'
    jvmArgs = previewJvmArgs
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

dependencies {
    jmhImplementation group: 'org.openjdk.jmh', name: 'jmh-core', version: lib_jmh_version
    jmhAnnotationProcessor group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: lib_jmh_version

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: lib_junit_version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: lib_junit_version
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

tasks.compileJava {
    options.compilerArgs.addAll(previewJvmArgs)
}

tasks.compileJmhJava {
    options.compilerArgs.addAll(previewJvmArgs)
}

// to make sure benchmarks always get compiled
classes.finalizedBy(jmhClasses)